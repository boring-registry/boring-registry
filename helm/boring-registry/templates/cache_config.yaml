{{- if .Values.proxy.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  labels:
    {{- include "boring-registry.labels" . | nindent 4 }}
data:
  nginx.conf: |
    worker_processes 1;
    events { worker_connections 2048; } # no of connections of clients + proxy upstream

    http {
      proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size={{- .Values.proxy.cache.maxSize }}m inactive=60m use_temp_path=off;

      server {
        listen 80;

        location / {
          access_log off;
          proxy_cache my_cache;

          # Cache validity settings
          proxy_cache_valid 200 302 {{ .Values.proxy.cache.hit }};
          proxy_cache_valid 204 307 {{ .Values.proxy.cache.download }};
          proxy_cache_valid 404 {{ .Values.proxy.cache.miss }};
          proxy_cache_revalidate on;

          # Ensure that all authorization headers are checked by the backend
          proxy_cache_bypass $http_authorization;
          proxy_set_header Authorization $http_authorization;

          # Use cache even if authorisation header is present, but key off header
          proxy_cache_key "$http_authorization$scheme$proxy_host$request_uri";

          # Pass the request to the backend server
          proxy_pass http://localhost:{{ .Values.server.port }};
        }

        location /metrics {
          access_log off;
          proxy_pass http://localhost:{{ .Values.server.telemetryPort }};
        }
      }
    }
{{- end }}